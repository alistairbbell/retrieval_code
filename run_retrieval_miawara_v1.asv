
% This function does a Qpack2 retrieval, based on information
% about the measurement (M) and on the information about the
% retrieval (R). The QQ-Structure contains additional information
% for the Q-Structure. The information in the QQ-Structure will be
% replaced into the Q-Structure after the Q-Structure was created.
%


%==========================================================================
% NAME      | run_retrieval_miawara_v1.m
% TYPE      | Script
% AUTHOR(S) | Alistair Bell
% CREATION  | 03.2023
%           |
% ABSTRACT  | Main script for launching the retrieval of MIAWARA calibrated
%           | brightness temperature data. 


%           | This script is designed for running custom retrievals (i.e.
%           | either testing various settings or running retrievals over a
%           | specific period of time. 
%           |
%           | Changes to the setting paramters must be made through
%           | manually changing the 'extra_settings' structure. This
%           | includes paths towards the output directories, plotting
%           | settings, and the a priori profiles used, in addition to other
%           | retrieval paramters which affect how the retrieval is run. 
%      
%           | 
%           | 
% ARGUMENTS | INPUTS: - start and end date
%           |
%           | OUTPUTS: level1b data, tropospheric opacity data
%           |
% CALLS     | import_default_calibrationTool(instrumentName,dateStr)
%           | run_calibration(calibrationTool)
%           |
%==========================================================================




%%% first setup for retrieval with ARTS/Qpack 2.4


% Initialize paths for Atmlab:
addpath('/home/alistair/ARTS/testing/atmlab-2.4.2/')
run( '/home/alistair/ARTS/testing/atmlab-2.4.2/atmlab/atmlab_init.m' )
version=1;
sub_version=1;
delta_t=24; %hours

%%%%%%%%%%% start and stop time of retrievals%%%%%%%%%%%%%%%%

start=datenum(2022,10,26);
stop=datenum(2022,10,27);

%%%%%%%%%%%%%% add a brief description of settings %%%%%%%%%%
%% It is important to update this section on EACH RUN %%
extra_info.settings_metadata.title = 'retrieval baseline testing';
extra_info.settings_metadata.bandwidth = '70MHz';
extra_info.settings_metadata.baseline_retieval = 'sine fit 5/50MHz; 4th order polynomial';
extra_info.settings_metadata.other_info = '0 offset /n250Hz total BW/n 125 2sigma';
extra_info.settings_metadata.run_date =  datestr(datetime("today"));
extra_info.plot_dir = '/home/alistair/export/data/miawara/retrieval_plots/LOWNOISE/';

%=================information needed for retrievals========================
%=======================RETRIEVAL SETTINGS=================================
extra_info.proxy_surf_height = 16000; %minimum retrieval height in m
%%%frequency
extra_info.f_cen =  22.23508e9; %measuerment central frequency (for FM)
extra_info.bw_measurement_noise = 60e6; %range over which system noise found
extra_info.bw_fm = 1020e6; %bandwidth over which forward model run
extra_info.bw_obs = 1001e6; %Bandwidth in Hz of observation used for retreivals
extra_info.use_freq_offset = 0e6;%e6  %Bandwidth in Hz which used frequency is shifted by
extra_info.twoSigma = 6e6;
%extra_info.twoSigma = 90e6;
extra_info.sigmaMin = 0.005;
%extra_info.sigmaMin = 0.02;
extra_info.additional_noise = 0.002;
%idx_exclude = [8186 8187 8188 8189 8192 8190 8191 8192 8193 8193 8194 8195 8196 8197 8198];
idx_exclude = [8192 8193]; % 8192 8193 8193 8194
extra_info.noise_inf_idx = [1:8192-875 idx_exclude 8192+875:16384]; %[1:8192-655 idx_exclude 8192+655:16384];%8192+573:16384 
%extra_info.noise_inf_idx = [1:8192-775 idx_exclude 8192+775:16384]; %[1:8192-655 idx_exclude 8192+655:16384];%8192+573:16384 

extra_info.idx_exclude = []; %[1:8192-655 idx_exclude 8192+655:16384];

%==================Files and Paths===========================

extra_info.l1_savename = 'MIAWARA_level1a_AC240_';
extra_info.l1_file_ext = '.nc' ;
extra_info.save_dir = '/home/alistair/export/data/miawara/LOWNOISE/';
extra_info.l1_dir = '/home/alistair/export/data/miawara/L1_nc_Caibration_24hr/';  %L2_nc_Retrievals_1hr %l1_experiment
extra_info.top_dir = '/home/alistair/MIAWARA_ret/old_miawara_calibration/retrieval_data';
extra_info.ecmwf_dir = '/storage/tub/atmosphere/ecmwf/locations/Bern/' ;
extra_info.ecmwf_filename = 'ecmwf_oper_v2_BERN_';
extra_info.ecmwf_coeff = '/home/alistair/MIAWARA_ret/extra_files/table_ECMWF.csv';
extra_info.a_priori_filename = '/home/alistair/MIAWARA_ret/a_priori/ecmwf_2010_2015_3_9_15_21h.nc';
%extra_info.a_priori_filename = '/home/alistair/MIAWARA_ret/a_priori/retrieved_2015_2020_3_9_15_21h.nc';

%===================Specify Some Routines==================================
extra_info.get_msm = @(time_str,extra_info) get_level1_miawara_NetCDF_V2(time_str,extra_info);

%===============initialise some variables and logs ========================
extra_info.error_list = strings(0);
unix(['mkdir ' extra_info.save_dir]);
start = ceil(start*24/delta_t)/(24/delta_t);
disp('start')
disp(start)
stop = ceil(stop*24/delta_t)/(24/delta_t);
disp('stop')
disp(stop)

disp(sprintf('processing time interval %s to %s, ARTS2, %i MHz',datestr(start,31),datestr(stop,31),extra_info.bw_obs/1e6));
disp(sprintf('distorted part of spectrum cut away!\n'));

time=start;
for time=start:delta_t/24:stop
    clear L2
    %disp(datestr(time))
    %%%%%%%%% Import measurement data %%%%%%%%
    try
        [Y, msm,extra_info] = get_Y_miawara(time, extra_info);
        disp('msm fieldnames')
        disp(fieldnames(msm))
        disp(msm(1).time)
        if isempty(msm)
          disp('No measurements found')
        %time=time+.1;
        else      
          for i = 1:length(msm)
            %%%%%%%%% define forward model and retrieval settings %%%%%%%%%
            disp('Profile number:')
            disp(i)
            [Q, O] = setup_Q_O(Y(i),msm(i), extra_info);
            
            if isempty(Q)
                %time=time+.1;
                continue
            end
            
            %%% Check that all frequencies are OK
            Q.SENSOR_RESPONSE.MIXER_DO = cellfun(@(x) ~isempty(x) && x~=0,Q.SENSOR_RESPONSE.MIXER_DO);
            %if Q.SENSOR_RESPONSE.MIXER_DO
            %Y(i).F = Q.SENSOR_RESPONSE.F_BACKEND;
            %end
            disp('Checking for consistency...')
        
            disp( 'Q.SENSOR_RESPONSE.F_BACKEND')
         % disp( size(Q.SENSOR_RESPONSE.F_BACKEND))
            
            if ~qp2_check_f( Q, Y(i), 1e3 )
                disp( 'Some mismatch between Q.F_BACKEND and frequencies of spectra.' );
                return
            end
            disp('====START INVERSION======')
            try
                %%%%%%%%% Perform inversion %%%%%%%%%
                L2 = qpack2(Q,O,Y(i));
                L2.Y = Y(i);
                L2.Q = Q;
                L2.O = O;
                L2.species1_z=interp1(log10(L2.p_grid),L2.z_field,log10(L2.species1_p));
                L2.species1_T=interp1(log10(L2.p_grid),L2.t_field,log10(L2.species1_p));

                %%%%%%%%% Add some information and save %%%%%%%%%
                L2.max_time=msm(i).max_time;
                L2.min_time=msm(i).min_time;
                L2.tint = msm(i).tint;
                if isfield(msm,'tau')
                    L2.tau=mean(msm(i).tau(:),'omitnan');
                    L2.mirror_elevation= mean(msm(i).mirror_elevation,'omitnan');
                    L2.mirror_ele_max=max(msm(i).mirror_elevation);
                    L2.mirror_ele_min=min(msm(i).mirror_elevation);
                elseif isfield(msm(i),'tau1')&&~isempty(msm(i).tau2)&&~isempty(msm(i).tau1), 
                    L2.tau=mean([msm(i).tau1(:,2); msm(i).tau2(:,2)],'omitnan' );
                    L2.mirror_elevation=nanmean([msm(i).mirror_ele1; msm(i).mirror_ele2]);
                    L2.mirror_ele_max=max([msm(i).mirror_ele1; msm(i).mirror_ele2]);
                    L2.mirror_ele_min=min([msm(i).mirror_ele1; msm(i).mirror_ele2]);
                elseif isfield(msm(i),'tau1')&&isempty(msm(i).tau2)&&~isempty(msm(i).tau1), 
                    L2.tau=mean(msm(i).tau1(:,2), 'omitnan');
                    L2.mirror_elevation=mean(msm(i).mirror_ele1, 'omitnan');
                    L2.mirror_ele_max=max([msm(i).mirror_ele1]);
                    L2.mirror_ele_min=min([msm(i).mirror_ele1]);
                elseif isfield(msm(i),'tau1')&&isempty(msm(i).tau1)&&~isempty(msm(i).tau2), 
                    L2.tau=mean(msm(i).tau2(:,2), 'omitnan');
                    L2.mirror_elevation=mean(msm(i).mirror_ele2, 'omitnan');
                    L2.mirror_ele_max=max([msm(i).mirror_ele2]);
                    L2.mirror_ele_min=min([msm(i).mirror_ele2]);
                end

                %- Define L2 structure (beside retrieval quantities below)
                Q.L2_EXTRA = {'dx','cost','e','eo','es','A','S','yf','So','Ss','G','J','mresp','date','xa','y','bl','tnoise','ptz'};
                %
                % %- Frequency (shift retrieval here, shift+stretch also possible)
                % %
                L2.Y = Y(i);
                L2.Q = Q;
                L2.O = O;
                L2.species1_z=interp1(log10(L2.p_grid),L2.z_field,log10(L2.species1_p));
                L2.species1_T=interp1(log10(L2.p_grid),L2.t_field,log10(L2.species1_p));
                if isempty(L2)==0
                   
                   filename=sprintf('%s/retrieval_%i%.02i%.02i%.02i%.02i.mat',extra_info.save_dir,L2.year,L2.month,L2.day,L2.hour,L2.minute);
                   disp(filename)
                   save(filename,'L2');
                   filename_nc=sprintf('%s/retrieval_%i%.02i%.02i%.02i%.02i.nc',extra_info.save_dir,L2.year,L2.month,L2.day,L2.hour,L2.minute);
                   save_level2_miawara(L2, filename_nc);
                   retrievalPlotting(L2,Y, extra_info.settings_metadata, append(extra_info.plot_dir, datestr(time),'/'))
                   
                   %===== the beginning of the next retrieval period is given by the max_time of the current msm
                   %time=L2.max_time;
                else
                    disp('L2 is empty')
             
                end
            catch ME
                extra_info.error_list(1) = strcat(ME.message,string(datetime((msm(i).time + datenum(1970,1,1)),'ConvertFrom','datenum')))  ;
            end
            disp(extra_info.error_list)
          end
        end
    end
end


